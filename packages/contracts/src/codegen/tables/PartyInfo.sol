// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("PartyInfo")))
);
ResourceId constant PartyInfoTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x009c060014201420142000000000000000000000000000000000000000000000
);

library PartyInfo {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](6);
    _valueSchema[0] = SchemaType.ADDRESS;
    _valueSchema[1] = SchemaType.INT256;
    _valueSchema[2] = SchemaType.ADDRESS;
    _valueSchema[3] = SchemaType.INT256;
    _valueSchema[4] = SchemaType.ADDRESS;
    _valueSchema[5] = SchemaType.INT256;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "key";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "slotOne";
    fieldNames[1] = "slotOneClass";
    fieldNames[2] = "slotTwo";
    fieldNames[3] = "slotTwoClass";
    fieldNames[4] = "slotThree";
    fieldNames[5] = "slotThreeClass";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get slotOne.
   */
  function getSlotOne(bytes32 key) internal view returns (address slotOne) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get slotOne.
   */
  function _getSlotOne(bytes32 key) internal view returns (address slotOne) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set slotOne.
   */
  function setSlotOne(bytes32 key, address slotOne) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((slotOne)), _fieldLayout);
  }

  /**
   * @notice Set slotOne.
   */
  function _setSlotOne(bytes32 key, address slotOne) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((slotOne)), _fieldLayout);
  }

  /**
   * @notice Get slotOneClass.
   */
  function getSlotOneClass(bytes32 key) internal view returns (int256 slotOneClass) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int256(uint256(bytes32(_blob))));
  }

  /**
   * @notice Get slotOneClass.
   */
  function _getSlotOneClass(bytes32 key) internal view returns (int256 slotOneClass) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int256(uint256(bytes32(_blob))));
  }

  /**
   * @notice Set slotOneClass.
   */
  function setSlotOneClass(bytes32 key, int256 slotOneClass) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((slotOneClass)), _fieldLayout);
  }

  /**
   * @notice Set slotOneClass.
   */
  function _setSlotOneClass(bytes32 key, int256 slotOneClass) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((slotOneClass)), _fieldLayout);
  }

  /**
   * @notice Get slotTwo.
   */
  function getSlotTwo(bytes32 key) internal view returns (address slotTwo) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get slotTwo.
   */
  function _getSlotTwo(bytes32 key) internal view returns (address slotTwo) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set slotTwo.
   */
  function setSlotTwo(bytes32 key, address slotTwo) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((slotTwo)), _fieldLayout);
  }

  /**
   * @notice Set slotTwo.
   */
  function _setSlotTwo(bytes32 key, address slotTwo) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((slotTwo)), _fieldLayout);
  }

  /**
   * @notice Get slotTwoClass.
   */
  function getSlotTwoClass(bytes32 key) internal view returns (int256 slotTwoClass) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int256(uint256(bytes32(_blob))));
  }

  /**
   * @notice Get slotTwoClass.
   */
  function _getSlotTwoClass(bytes32 key) internal view returns (int256 slotTwoClass) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int256(uint256(bytes32(_blob))));
  }

  /**
   * @notice Set slotTwoClass.
   */
  function setSlotTwoClass(bytes32 key, int256 slotTwoClass) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((slotTwoClass)), _fieldLayout);
  }

  /**
   * @notice Set slotTwoClass.
   */
  function _setSlotTwoClass(bytes32 key, int256 slotTwoClass) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((slotTwoClass)), _fieldLayout);
  }

  /**
   * @notice Get slotThree.
   */
  function getSlotThree(bytes32 key) internal view returns (address slotThree) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get slotThree.
   */
  function _getSlotThree(bytes32 key) internal view returns (address slotThree) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set slotThree.
   */
  function setSlotThree(bytes32 key, address slotThree) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((slotThree)), _fieldLayout);
  }

  /**
   * @notice Set slotThree.
   */
  function _setSlotThree(bytes32 key, address slotThree) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((slotThree)), _fieldLayout);
  }

  /**
   * @notice Get slotThreeClass.
   */
  function getSlotThreeClass(bytes32 key) internal view returns (int256 slotThreeClass) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (int256(uint256(bytes32(_blob))));
  }

  /**
   * @notice Get slotThreeClass.
   */
  function _getSlotThreeClass(bytes32 key) internal view returns (int256 slotThreeClass) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (int256(uint256(bytes32(_blob))));
  }

  /**
   * @notice Set slotThreeClass.
   */
  function setSlotThreeClass(bytes32 key, int256 slotThreeClass) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((slotThreeClass)), _fieldLayout);
  }

  /**
   * @notice Set slotThreeClass.
   */
  function _setSlotThreeClass(bytes32 key, int256 slotThreeClass) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((slotThreeClass)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(
    bytes32 key
  )
    internal
    view
    returns (
      address slotOne,
      int256 slotOneClass,
      address slotTwo,
      int256 slotTwoClass,
      address slotThree,
      int256 slotThreeClass
    )
  {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    bytes32 key
  )
    internal
    view
    returns (
      address slotOne,
      int256 slotOneClass,
      address slotTwo,
      int256 slotTwoClass,
      address slotThree,
      int256 slotThreeClass
    )
  {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 key,
    address slotOne,
    int256 slotOneClass,
    address slotTwo,
    int256 slotTwoClass,
    address slotThree,
    int256 slotThreeClass
  ) internal {
    bytes memory _staticData = encodeStatic(slotOne, slotOneClass, slotTwo, slotTwoClass, slotThree, slotThreeClass);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 key,
    address slotOne,
    int256 slotOneClass,
    address slotTwo,
    int256 slotTwoClass,
    address slotThree,
    int256 slotThreeClass
  ) internal {
    bytes memory _staticData = encodeStatic(slotOne, slotOneClass, slotTwo, slotTwoClass, slotThree, slotThreeClass);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      address slotOne,
      int256 slotOneClass,
      address slotTwo,
      int256 slotTwoClass,
      address slotThree,
      int256 slotThreeClass
    )
  {
    slotOne = (address(Bytes.slice20(_blob, 0)));

    slotOneClass = (int256(uint256(Bytes.slice32(_blob, 20))));

    slotTwo = (address(Bytes.slice20(_blob, 52)));

    slotTwoClass = (int256(uint256(Bytes.slice32(_blob, 72))));

    slotThree = (address(Bytes.slice20(_blob, 104)));

    slotThreeClass = (int256(uint256(Bytes.slice32(_blob, 124))));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    PackedCounter,
    bytes memory
  )
    internal
    pure
    returns (
      address slotOne,
      int256 slotOneClass,
      address slotTwo,
      int256 slotTwoClass,
      address slotThree,
      int256 slotThreeClass
    )
  {
    (slotOne, slotOneClass, slotTwo, slotTwoClass, slotThree, slotThreeClass) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    address slotOne,
    int256 slotOneClass,
    address slotTwo,
    int256 slotTwoClass,
    address slotThree,
    int256 slotThreeClass
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(slotOne, slotOneClass, slotTwo, slotTwoClass, slotThree, slotThreeClass);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address slotOne,
    int256 slotOneClass,
    address slotTwo,
    int256 slotTwoClass,
    address slotThree,
    int256 slotThreeClass
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(slotOne, slotOneClass, slotTwo, slotTwoClass, slotThree, slotThreeClass);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    return _keyTuple;
  }
}
