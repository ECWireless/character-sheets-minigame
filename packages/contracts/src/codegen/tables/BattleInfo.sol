// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("BattleInfo")))
);
ResourceId constant BattleInfoTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0032070001040404200401000000000000000000000000000000000000000000
);

library BattleInfo {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](7);
    _valueSchema[0] = SchemaType.BOOL;
    _valueSchema[1] = SchemaType.UINT32;
    _valueSchema[2] = SchemaType.UINT32;
    _valueSchema[3] = SchemaType.UINT32;
    _valueSchema[4] = SchemaType.BYTES32;
    _valueSchema[5] = SchemaType.UINT32;
    _valueSchema[6] = SchemaType.BOOL;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "key";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "active";
    fieldNames[1] = "slotOneHealth";
    fieldNames[2] = "slotTwoHealth";
    fieldNames[3] = "slotThreeHealth";
    fieldNames[4] = "molochId";
    fieldNames[5] = "molochHealth";
    fieldNames[6] = "molochDefeated";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get active.
   */
  function getActive(bytes32 key) internal view returns (bool active) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get active.
   */
  function _getActive(bytes32 key) internal view returns (bool active) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set active.
   */
  function setActive(bytes32 key, bool active) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((active)), _fieldLayout);
  }

  /**
   * @notice Set active.
   */
  function _setActive(bytes32 key, bool active) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((active)), _fieldLayout);
  }

  /**
   * @notice Get slotOneHealth.
   */
  function getSlotOneHealth(bytes32 key) internal view returns (uint32 slotOneHealth) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get slotOneHealth.
   */
  function _getSlotOneHealth(bytes32 key) internal view returns (uint32 slotOneHealth) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set slotOneHealth.
   */
  function setSlotOneHealth(bytes32 key, uint32 slotOneHealth) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((slotOneHealth)), _fieldLayout);
  }

  /**
   * @notice Set slotOneHealth.
   */
  function _setSlotOneHealth(bytes32 key, uint32 slotOneHealth) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((slotOneHealth)), _fieldLayout);
  }

  /**
   * @notice Get slotTwoHealth.
   */
  function getSlotTwoHealth(bytes32 key) internal view returns (uint32 slotTwoHealth) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get slotTwoHealth.
   */
  function _getSlotTwoHealth(bytes32 key) internal view returns (uint32 slotTwoHealth) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set slotTwoHealth.
   */
  function setSlotTwoHealth(bytes32 key, uint32 slotTwoHealth) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((slotTwoHealth)), _fieldLayout);
  }

  /**
   * @notice Set slotTwoHealth.
   */
  function _setSlotTwoHealth(bytes32 key, uint32 slotTwoHealth) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((slotTwoHealth)), _fieldLayout);
  }

  /**
   * @notice Get slotThreeHealth.
   */
  function getSlotThreeHealth(bytes32 key) internal view returns (uint32 slotThreeHealth) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get slotThreeHealth.
   */
  function _getSlotThreeHealth(bytes32 key) internal view returns (uint32 slotThreeHealth) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set slotThreeHealth.
   */
  function setSlotThreeHealth(bytes32 key, uint32 slotThreeHealth) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((slotThreeHealth)), _fieldLayout);
  }

  /**
   * @notice Set slotThreeHealth.
   */
  function _setSlotThreeHealth(bytes32 key, uint32 slotThreeHealth) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((slotThreeHealth)), _fieldLayout);
  }

  /**
   * @notice Get molochId.
   */
  function getMolochId(bytes32 key) internal view returns (bytes32 molochId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get molochId.
   */
  function _getMolochId(bytes32 key) internal view returns (bytes32 molochId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set molochId.
   */
  function setMolochId(bytes32 key, bytes32 molochId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((molochId)), _fieldLayout);
  }

  /**
   * @notice Set molochId.
   */
  function _setMolochId(bytes32 key, bytes32 molochId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((molochId)), _fieldLayout);
  }

  /**
   * @notice Get molochHealth.
   */
  function getMolochHealth(bytes32 key) internal view returns (uint32 molochHealth) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get molochHealth.
   */
  function _getMolochHealth(bytes32 key) internal view returns (uint32 molochHealth) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set molochHealth.
   */
  function setMolochHealth(bytes32 key, uint32 molochHealth) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((molochHealth)), _fieldLayout);
  }

  /**
   * @notice Set molochHealth.
   */
  function _setMolochHealth(bytes32 key, uint32 molochHealth) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((molochHealth)), _fieldLayout);
  }

  /**
   * @notice Get molochDefeated.
   */
  function getMolochDefeated(bytes32 key) internal view returns (bool molochDefeated) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get molochDefeated.
   */
  function _getMolochDefeated(bytes32 key) internal view returns (bool molochDefeated) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set molochDefeated.
   */
  function setMolochDefeated(bytes32 key, bool molochDefeated) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((molochDefeated)), _fieldLayout);
  }

  /**
   * @notice Set molochDefeated.
   */
  function _setMolochDefeated(bytes32 key, bool molochDefeated) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((molochDefeated)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(
    bytes32 key
  )
    internal
    view
    returns (
      bool active,
      uint32 slotOneHealth,
      uint32 slotTwoHealth,
      uint32 slotThreeHealth,
      bytes32 molochId,
      uint32 molochHealth,
      bool molochDefeated
    )
  {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    bytes32 key
  )
    internal
    view
    returns (
      bool active,
      uint32 slotOneHealth,
      uint32 slotTwoHealth,
      uint32 slotThreeHealth,
      bytes32 molochId,
      uint32 molochHealth,
      bool molochDefeated
    )
  {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 key,
    bool active,
    uint32 slotOneHealth,
    uint32 slotTwoHealth,
    uint32 slotThreeHealth,
    bytes32 molochId,
    uint32 molochHealth,
    bool molochDefeated
  ) internal {
    bytes memory _staticData = encodeStatic(
      active,
      slotOneHealth,
      slotTwoHealth,
      slotThreeHealth,
      molochId,
      molochHealth,
      molochDefeated
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 key,
    bool active,
    uint32 slotOneHealth,
    uint32 slotTwoHealth,
    uint32 slotThreeHealth,
    bytes32 molochId,
    uint32 molochHealth,
    bool molochDefeated
  ) internal {
    bytes memory _staticData = encodeStatic(
      active,
      slotOneHealth,
      slotTwoHealth,
      slotThreeHealth,
      molochId,
      molochHealth,
      molochDefeated
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      bool active,
      uint32 slotOneHealth,
      uint32 slotTwoHealth,
      uint32 slotThreeHealth,
      bytes32 molochId,
      uint32 molochHealth,
      bool molochDefeated
    )
  {
    active = (_toBool(uint8(Bytes.slice1(_blob, 0))));

    slotOneHealth = (uint32(Bytes.slice4(_blob, 1)));

    slotTwoHealth = (uint32(Bytes.slice4(_blob, 5)));

    slotThreeHealth = (uint32(Bytes.slice4(_blob, 9)));

    molochId = (Bytes.slice32(_blob, 13));

    molochHealth = (uint32(Bytes.slice4(_blob, 45)));

    molochDefeated = (_toBool(uint8(Bytes.slice1(_blob, 49))));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    PackedCounter,
    bytes memory
  )
    internal
    pure
    returns (
      bool active,
      uint32 slotOneHealth,
      uint32 slotTwoHealth,
      uint32 slotThreeHealth,
      bytes32 molochId,
      uint32 molochHealth,
      bool molochDefeated
    )
  {
    (active, slotOneHealth, slotTwoHealth, slotThreeHealth, molochId, molochHealth, molochDefeated) = decodeStatic(
      _staticData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bool active,
    uint32 slotOneHealth,
    uint32 slotTwoHealth,
    uint32 slotThreeHealth,
    bytes32 molochId,
    uint32 molochHealth,
    bool molochDefeated
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(active, slotOneHealth, slotTwoHealth, slotThreeHealth, molochId, molochHealth, molochDefeated);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bool active,
    uint32 slotOneHealth,
    uint32 slotTwoHealth,
    uint32 slotThreeHealth,
    bytes32 molochId,
    uint32 molochHealth,
    bool molochDefeated
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(
      active,
      slotOneHealth,
      slotTwoHealth,
      slotThreeHealth,
      molochId,
      molochHealth,
      molochDefeated
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
